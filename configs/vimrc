" Modeline {

" vim: foldmarker={,} foldlevel=0 foldmethod=marker spell
" Author (more or less) Sever Banesiu <banesiu.sever@gmail.com>

" }

" Loading {


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/.vim/vundleplugins/')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'flazz/vim-colorschemes'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'fisadev/vim-isort'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-easymotion'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" }

" Bindings {

" I'm using Dvorak and , is a very handy mapleader.
let mapleader = ","

" Comment and uncomment lines of code with this search and replace expression.
" This uses a positive lookahead. How cool is that!?
noremap <leader># :s/^\([\t\ ]*[^\ \t#]\+\)\&/#\ /<cr>
" And here we replace by reusing a group.
noremap <leader>3 :s/^\([\t\ ]*\)#\ \?/\1/<cr>

" Automatically use Python like regex when searching.
nnoremap / /\v
vnoremap / /\v

" Use ,<space> to clear search highlight.
nnoremap <leader><space> :noh<cr>

" Use ,W to remove tailing spaces.
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>

noremap  <F1> <nop>
inoremap <F1> <nop>

" }

" Basic {

" Add support for 256 color terminal
set t_Co=256
set nocompatible
set backup
set noswapfile
set hlsearch
set incsearch
set ignorecase
set nowrap
set foldenable
set foldmethod=indent
set helplang=En
set history=1024
set undolevels=1024 " use all the undos ever.
set background=dark
set hlsearch " Don't keep the search results highlighted. I hate that.
set title
set shiftwidth=4
set expandtab
set tabstop=8
set encoding=utf-8
set modelines=0
set autoindent
set showmode
set showcmd
set nocursorline
set ttyfast
set nonumber
set cpoptions+=J " Sentence followed by two spaces.
set lazyredraw
set splitbelow
set splitright
set notimeout
set nottimeout
set autoread
set dictionary=/usr/share/dict/words
set backupdir=~/.vim/tmp/backup/ " backups
set directory=~/.vim/tmp/swap/   " swap files
syntax on
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on
compiler pyunit
colors Tomorrow-Night-Eighties
set colorcolumn=80

" }

" Advanced {

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="
set hidden " Allow buffers to be changed even if they contain changes.
set noexrc " Don't try to load some configuration files.
set backspace=indent,eol,start " This is supposed to make backspace more flexible.
set keymodel= " I don't want to select using Shift + End or the like.
set showmatch " Show matching parenthesis
set smartcase " Ignore case if search pattern is all lowercase,
set gdefault " By default use a global replace instead of line replace
set ruler " Shows the line and col number. Can be customized.
set selection=exclusive " When selecting from right to left, the last char isn't included.
set selectmode= " Why do I need a Select mode?
set wildignore=*.pyc,*~,*.pyw,.hg,.svn,.git,*.swp,*.bak " What to ignore when search a filename.
set wildmode=list:full " How to display the file list when searching.
" No damn visual, audio or error bell.
set noerrorbells
set novisualbell
set vb t_vb=".
set clipboard+=unnamed " Share clipboard with Windows. Aww...
set iskeyword+=_ " Underscore is part of a word in my world.
set laststatus=2 " Always display status line.
set linespace=0 " No empty spaces between the rows.
set list " Show whitespaces so I can remove them, doo'h!
set listchars=tab:·\ ,eol:¬,trail:»
set matchtime=3 " Blinks the matching bracket.
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v] " Don't ask!


" }

" GUI {

if has("gui_running")
	"set guifont=Monaco:h9:cANSI
	" There are a bunch of options here, I don't want most of them.
	" This hides everything uses simple dialogues as opposed to pop-ups and uses GUI tabs for tabs.
	set guioptions=ce
	highlight SpellBad term=underline gui=undercurl guisp=Orange
endif

" }

" Autocmds {

autocmd BufEnter * :syntax sync fromstart " Slower but better syntax highlight
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" }

" Extension configurations {

let g:syntastic_auto_loc_list = 2 " Auto close error window but don't open.
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1 " Put errors on left side
let g:syntastic_error_symbol='★'
let g:syntastic_style_error_symbol='>'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_warning_symbol='>'


" Make sure parantheses are always colored
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

let g:ctrlp_cmd = 'CtrlPMixed'

" }
